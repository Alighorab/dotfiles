snippet env "Adds shebang line for default python interpreter." b
#!/usr/bin/env python
$0
endsnippet

snippet env3 "Adds shebang line for default python 3 interpreter." b
#!/usr/bin/env python3
$0
endsnippet

snippet enc "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263." b
# -*- coding=utf-8 -*-
$0
endsnippet

snippet im "Import a package or module" b
import ${1:package/module}$0
endsnippet

snippet fim "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table." b
from ${1:package/module} import ${2:names}$0
endsnippet

snippet class "Code snippet for a class definition" b
class ${1:classname}(${2:object}):
	${3:pass}
endsnippet

snippet classi "Code snippet for a class definition." b
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1.}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.arg = arg
		$0
endsnippet

snippet defs "Code snippet for a class method definition." b
def ${1:mname}(self, ${2:arg}):
	${3:pass}$0
endsnippet

snippet defst "Code snippet for a class method definition." b
def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:
	${4:pass}$0
endsnippet

snippet def "Code snippet for function definition." b
def ${1:fname}(${2:arg}):
	${3:pass}$0
endsnippet

snippet adef "Code snippet for async function definition." b
async def ${1:fname}(${2:arg}):
	${3:pass}$0
endsnippet

snippet property "New property: get and set via decorator" b
@property
def ${1:foo}(self):
    """${2:The $1 property.}"""
    ${3:return self._$1}
@${4:$1}.setter
def ${5:$1}(self, value):
    ${6:self._$1} = value
endsnippet

snippet if "Code snippet for the if statement." b
if ${1:condition}:
	${2:pass}$0
endsnippet

snippet ifelse "Code snippet for an if statement with else" b
if ${1:condition}:
	${2:pass}
else:
	${3:pass}
endsnippet

snippet elif "Code snippet for an elif" b
elif ${1:expression}:
	${2:pass}
endsnippet

snippet else "Code snippet for an else" b
else:
	${1:pass}
endsnippet

snippet for "Code snippet to create a for loop structure." b
for ${1:value} in ${2:iterable}:
	${3:pass}$0
endsnippet

snippet fore "Code snippet for a for loop with else" b
for ${1:target_list} in ${2:expression_list}:
	${3:pass}
else:
	${4:pass}
endsnippet

snippet while "Code snippet to create a while loop structure." b
while ${1:condition}:
	${2:pass}$0
endsnippet

snippet whilee "Code snippet for a while loop with else" b
while ${1:expression}:
	${2:pass}
else:
	${3:pass}
endsnippet

snippet try "Code Snippet for a try and except blocks." b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}$0
endsnippet

snippet tryef "Code Snippet for a try/except/finally with else statement." b
try:
	${1:pass}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}$0
endsnippet

snippet trye "Code Snippet for a try/except with else statement." b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}$0
endsnippet

snippet tryf "Code Snippet for a try/except/finally." b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}$0
endsnippet

snippet with "Code snippet for a with statement" b
with ${1:expression} as ${2:target}:
	${3:pass}
endsnippet

snippet . "Shortend snippet to reference the self property in an object." b
self.$0
endsnippet

snippet ifmain "Create implicitly all the code at the top level using the __name__ special variable." b
if __name__ == "__main__":
	${1:main()}$0
endsnippet

# fuzzy cd
fzcd () {
    local f=$(cat <(/bin/ls -dp . ..) \
      <(/bin/ls -p | egrep "/$") \
      <(/bin/ls -Ap | egrep "^\..*/$") \
      <(find . -maxdepth 1 -type f | awk '{print substr ($0,3)}') 2> /dev/null \
        | fzf --reverse --preview 'if [[ "$(file {+})" = *"directory"* ]]; then 
                                        tree {+}; 
                                    elif [[ "$(file {+})" = *"text"* ]]; then 
                                        bat --color=always --style=numbers --line-range=:500 {}; 
                                    else 
                                        file {+}; 
                                    fi' \
        --preview-window=right,70%,wrap \
        --bind right:accept)
    [[ "$f" ]] && echo $(file "$f")
}
# simple fuzzy file explorer
sfzfe () {
    local out=$(fzcd)
    local f=$(echo $out | cut -d ':' -f 1)
    local ftype=$(echo $out | cut -d ':' -f 2)

    while [[ "$ftype" = *"directory"* && "$f" != "./" ]]; do
        cd "$f"
        out=$(fzcd)
        f=$(echo $out | cut -d ':' -f 1)
        ftype=$(echo $out | cut -d ':' -f 2)
    done
    [[ "$ftype" = *"text"* ]] && vim "$f" && return
    [[ "$f" ]] && echo -n "$f" | xclip -selection primary
}

zle -N sfzfe
bindkey -s "^[[102;6u" "sfzfe^Mcls^M"

# ex - archive extractor
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.tar.xz)    tar xf  $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

dir ()
{
    local base=$HOME/Study/computer-science-engineering
    local directory=$(find $base/ -path $base/learning/Yocto/poky -prune -o -type d | fzf)
    if [[ $directory ]]; then
        cd $directory
        clear
    fi
}


# Change working dir in shell to last dir in lf on exit (adapted from ranger).
#
# You need to either copy the content of this file to your shell rc file
# (e.g. ~/.bashrc) or source this file directly:
#
#     LFCD="/path/to/lfcd.sh"
#     if [ -f "$LFCD" ]; then
#         source "$LFCD"
#     fi
#
# You may also like to assign a key (Ctrl-O) to this command:
#
#     bind '"\C-o":"lfcd\C-m"'  # bash
#     bindkey -s '^o' 'lfcd\n'  # zsh
#

lfcd () {
    tmp="$(mktemp)"
    # `command` is needed in case `lfcd` is aliased to `lf`
    command lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}
